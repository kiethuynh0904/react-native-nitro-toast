///
/// JAlertToastType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "AlertToastType.hpp"

namespace margelo::nitro::nitrotoast {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "AlertToastType" and the the Kotlin enum "AlertToastType".
   */
  struct JAlertToastType final: public jni::JavaClass<JAlertToastType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotoast/AlertToastType;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum AlertToastType.
     */
    [[maybe_unused]]
    [[nodiscard]]
    AlertToastType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("_ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<AlertToastType>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JAlertToastType> fromCpp(AlertToastType value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldSUCCESS = clazz->getStaticField<JAlertToastType>("SUCCESS");
      static const auto fieldERROR = clazz->getStaticField<JAlertToastType>("ERROR");
      static const auto fieldWARNING = clazz->getStaticField<JAlertToastType>("WARNING");
      static const auto fieldINFO = clazz->getStaticField<JAlertToastType>("INFO");
      static const auto fieldDEFAULT = clazz->getStaticField<JAlertToastType>("DEFAULT");
      
      switch (value) {
        case AlertToastType::SUCCESS:
          return clazz->getStaticFieldValue(fieldSUCCESS);
        case AlertToastType::ERROR:
          return clazz->getStaticFieldValue(fieldERROR);
        case AlertToastType::WARNING:
          return clazz->getStaticFieldValue(fieldWARNING);
        case AlertToastType::INFO:
          return clazz->getStaticFieldValue(fieldINFO);
        case AlertToastType::DEFAULT:
          return clazz->getStaticFieldValue(fieldDEFAULT);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrotoast
