///
/// JPositionToastType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "PositionToastType.hpp"

namespace margelo::nitro::nitrotoast {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "PositionToastType" and the the Kotlin enum "PositionToastType".
   */
  struct JPositionToastType final: public jni::JavaClass<JPositionToastType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrotoast/PositionToastType;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum PositionToastType.
     */
    [[maybe_unused]]
    [[nodiscard]]
    PositionToastType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("_ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<PositionToastType>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JPositionToastType> fromCpp(PositionToastType value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldTOP = clazz->getStaticField<JPositionToastType>("TOP");
      static const auto fieldBOTTOM = clazz->getStaticField<JPositionToastType>("BOTTOM");
      
      switch (value) {
        case PositionToastType::TOP:
          return clazz->getStaticFieldValue(fieldTOP);
        case PositionToastType::BOTTOM:
          return clazz->getStaticFieldValue(fieldBOTTOM);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrotoast
