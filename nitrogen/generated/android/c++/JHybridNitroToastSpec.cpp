///
/// JHybridNitroToastSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroToastSpec.hpp"

// Forward declaration of `NitroToastType` to properly resolve imports.
namespace margelo::nitro::nitrotoast { enum class NitroToastType; }

#include <string>
#include "NitroToastType.hpp"
#include "JNitroToastType.hpp"

namespace margelo::nitro::nitrotoast {

  jni::local_ref<JHybridNitroToastSpec::jhybriddata> JHybridNitroToastSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroToastSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroToastSpec::initHybrid),
    });
  }

  size_t JHybridNitroToastSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridNitroToastSpec::show(const std::string& message, NitroToastType type) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* message */, jni::alias_ref<JNitroToastType> /* type */)>("show");
    method(_javaPart, jni::make_jstring(message), JNitroToastType::fromCpp(type));
  }

} // namespace margelo::nitro::nitrotoast
