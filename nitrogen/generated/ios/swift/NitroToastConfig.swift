///
/// NitroToastConfig.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroToastConfig`, backed by a C++ struct.
 */
public typealias NitroToastConfig = margelo.nitro.nitrotoast.NitroToastConfig

public extension NitroToastConfig {
  private typealias bridge = margelo.nitro.nitrotoast.bridge.swift

  /**
   * Create a new instance of `NitroToastConfig`.
   */
  init(type: AlertToastType, presentation: PresentationToastType, duration: Double, title: String?, position: PositionToastType, backgroundColor: String?, titleColor: String?, messageColor: String?, useOverlay: Bool) {
    self.init(type, presentation, duration, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = title {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), position, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = backgroundColor {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = titleColor {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = messageColor {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), useOverlay)
  }

  var type: AlertToastType {
    @inline(__always)
    get {
      return self.__type
    }
    @inline(__always)
    set {
      self.__type = newValue
    }
  }
  
  var presentation: PresentationToastType {
    @inline(__always)
    get {
      return self.__presentation
    }
    @inline(__always)
    set {
      self.__presentation = newValue
    }
  }
  
  var duration: Double {
    @inline(__always)
    get {
      return self.__duration
    }
    @inline(__always)
    set {
      self.__duration = newValue
    }
  }
  
  var title: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__title.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__title = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var position: PositionToastType {
    @inline(__always)
    get {
      return self.__position
    }
    @inline(__always)
    set {
      self.__position = newValue
    }
  }
  
  var backgroundColor: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__backgroundColor.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__backgroundColor = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var titleColor: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__titleColor.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__titleColor = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var messageColor: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__messageColor.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__messageColor = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var useOverlay: Bool {
    @inline(__always)
    get {
      return self.__useOverlay
    }
    @inline(__always)
    set {
      self.__useOverlay = newValue
    }
  }
}
