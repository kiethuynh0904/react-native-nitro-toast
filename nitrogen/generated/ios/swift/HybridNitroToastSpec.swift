///
/// HybridNitroToastSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroToastSpec``
public protocol HybridNitroToastSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func show(message: String, config: NitroToastConfig) throws -> Void
}

/// See ``HybridNitroToastSpec``
public class HybridNitroToastSpec_base {
  private weak var cxxWrapper: HybridNitroToastSpec_cxx? = nil
  public func getCxxWrapper() -> HybridNitroToastSpec_cxx {
  #if DEBUG
    guard self is HybridNitroToastSpec else {
      fatalError("`self` is not a `HybridNitroToastSpec`! Did you accidentally inherit from `HybridNitroToastSpec_base` instead of `HybridNitroToastSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroToastSpec_cxx(self as! HybridNitroToastSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroToast HybridObject.
 * Implement this protocol to create Swift-based instances of NitroToast.
 * ```swift
 * class HybridNitroToast : HybridNitroToastSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroToastSpec = HybridNitroToastSpec_protocol & HybridNitroToastSpec_base
