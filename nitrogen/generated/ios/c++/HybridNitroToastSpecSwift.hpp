///
/// HybridNitroToastSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroToastSpec.hpp"

// Forward declaration of `HybridNitroToastSpec_cxx` to properly resolve imports.
namespace NitroToast { class HybridNitroToastSpec_cxx; }

// Forward declaration of `NitroToastConfig` to properly resolve imports.
namespace margelo::nitro::nitrotoast { struct NitroToastConfig; }
// Forward declaration of `AlertToastType` to properly resolve imports.
namespace margelo::nitro::nitrotoast { enum class AlertToastType; }
// Forward declaration of `PresentationToastType` to properly resolve imports.
namespace margelo::nitro::nitrotoast { enum class PresentationToastType; }
// Forward declaration of `PositionToastType` to properly resolve imports.
namespace margelo::nitro::nitrotoast { enum class PositionToastType; }

#include <string>
#include "NitroToastConfig.hpp"
#include "AlertToastType.hpp"
#include "PresentationToastType.hpp"
#include <optional>
#include "PositionToastType.hpp"

#include "NitroToast-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrotoast {

  /**
   * The C++ part of HybridNitroToastSpec_cxx.swift.
   *
   * HybridNitroToastSpecSwift (C++) accesses HybridNitroToastSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroToastSpec_cxx can directly inherit from the C++ class HybridNitroToastSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroToastSpecSwift: public virtual HybridNitroToastSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroToastSpecSwift(const NitroToast::HybridNitroToastSpec_cxx& swiftPart):
      HybridObject(HybridNitroToastSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroToast::HybridNitroToastSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::string show(const std::string& message, const NitroToastConfig& config) override {
      auto __result = _swiftPart.show(message, config);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void dismiss(const std::string& toastId) override {
      auto __result = _swiftPart.dismiss(toastId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroToast::HybridNitroToastSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrotoast
