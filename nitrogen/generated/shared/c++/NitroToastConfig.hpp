///
/// NitroToastConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `AlertToastType` to properly resolve imports.
namespace margelo::nitro::nitrotoast { enum class AlertToastType; }
// Forward declaration of `PresentationToastType` to properly resolve imports.
namespace margelo::nitro::nitrotoast { enum class PresentationToastType; }
// Forward declaration of `PositionToastType` to properly resolve imports.
namespace margelo::nitro::nitrotoast { enum class PositionToastType; }

#include "AlertToastType.hpp"
#include "PresentationToastType.hpp"
#include <optional>
#include <string>
#include "PositionToastType.hpp"

namespace margelo::nitro::nitrotoast {

  /**
   * A struct which can be represented as a JavaScript object (NitroToastConfig).
   */
  struct NitroToastConfig {
  public:
    AlertToastType type     SWIFT_PRIVATE;
    PresentationToastType presentation     SWIFT_PRIVATE;
    double duration     SWIFT_PRIVATE;
    std::optional<std::string> title     SWIFT_PRIVATE;
    PositionToastType position     SWIFT_PRIVATE;

  public:
    NitroToastConfig() = default;
    explicit NitroToastConfig(AlertToastType type, PresentationToastType presentation, double duration, std::optional<std::string> title, PositionToastType position): type(type), presentation(presentation), duration(duration), title(title), position(position) {}
  };

} // namespace margelo::nitro::nitrotoast

namespace margelo::nitro {

  using namespace margelo::nitro::nitrotoast;

  // C++ NitroToastConfig <> JS NitroToastConfig (object)
  template <>
  struct JSIConverter<NitroToastConfig> final {
    static inline NitroToastConfig fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NitroToastConfig(
        JSIConverter<AlertToastType>::fromJSI(runtime, obj.getProperty(runtime, "type")),
        JSIConverter<PresentationToastType>::fromJSI(runtime, obj.getProperty(runtime, "presentation")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "duration")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "title")),
        JSIConverter<PositionToastType>::fromJSI(runtime, obj.getProperty(runtime, "position"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NitroToastConfig& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "type", JSIConverter<AlertToastType>::toJSI(runtime, arg.type));
      obj.setProperty(runtime, "presentation", JSIConverter<PresentationToastType>::toJSI(runtime, arg.presentation));
      obj.setProperty(runtime, "duration", JSIConverter<double>::toJSI(runtime, arg.duration));
      obj.setProperty(runtime, "title", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.title));
      obj.setProperty(runtime, "position", JSIConverter<PositionToastType>::toJSI(runtime, arg.position));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<AlertToastType>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      if (!JSIConverter<PresentationToastType>::canConvert(runtime, obj.getProperty(runtime, "presentation"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "duration"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "title"))) return false;
      if (!JSIConverter<PositionToastType>::canConvert(runtime, obj.getProperty(runtime, "position"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
