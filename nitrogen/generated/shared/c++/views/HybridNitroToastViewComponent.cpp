///
/// HybridNitroToastViewComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridNitroToastViewComponent.hpp"

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::nitrotoast::views {

  extern const char HybridNitroToastViewComponentName[] = "NitroToastView";

  HybridNitroToastViewProps::HybridNitroToastViewProps(const react::PropsParserContext& context,
                                                       const HybridNitroToastViewProps& sourceProps,
                                                       const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    hybridRef([&]() -> CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::nitrotoast::HybridNitroToastViewSpec>& /* ref */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hybridRef", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hybridRef;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::nitrotoast::HybridNitroToastViewSpec>& /* ref */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.hybridRef);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("NitroToastView.hybridRef: ") + exc.what());
      }
    }()) { }

  HybridNitroToastViewProps::HybridNitroToastViewProps(const HybridNitroToastViewProps& other):
    react::ViewProps(),
    hybridRef(other.hybridRef) { }

  bool HybridNitroToastViewProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("hybridRef"): return true;
      default: return false;
    }
  }

  HybridNitroToastViewComponentDescriptor::HybridNitroToastViewComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  react::RawPropsParser(/* enableJsiParser */ true)) {}

  react::Props::Shared HybridNitroToastViewComponentDescriptor::cloneProps(const react::PropsParserContext& context,
                                                                           const react::Props::Shared& props,
                                                                           react::RawProps rawProps) const {
    // 1. Prepare raw props parser
    rawProps.parse(rawPropsParser_);
    // 2. Copy props with Nitro's cached copy constructor
    return HybridNitroToastViewShadowNode::Props(context, /* & */ rawProps, props);
  }

#ifdef ANDROID
  void HybridNitroToastViewComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = dynamic_cast<HybridNitroToastViewShadowNode&>(shadowNode);
    const HybridNitroToastViewProps& props = concreteShadowNode.getConcreteProps();
    HybridNitroToastViewState state;
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
  }
#endif

} // namespace margelo::nitro::nitrotoast::views
